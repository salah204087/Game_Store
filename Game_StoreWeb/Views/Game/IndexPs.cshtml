@model IEnumerable<Game_StoreWeb.Models.DTO.GameDTO>
@{
    ViewData["Title"] = "List of Games";
}

<link rel="stylesheet" href="~/css/game.css" />
<div style="position: absolute; top: 15px; right: 15px;">
    <form class="form-inline" asp-controller="Game" asp-action="FilterPs">
        <div class="input-group">
            <input name="searchString" type="text" class="form-control rounded-pill border-0 shadow-sm" placeholder="Search for a game..." aria-label="Recipient's username" aria-describedby="button-addon2" style="max-width: 300px; background-color: #f8f9fa;">
            <div class="input-group-append">
                <button class="btn btn-success rounded-pill ms-2 shadow-sm" style="background-color:black" type="submit">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </button>
            </div>
        </div>
    </form>
</div>
<br />
<br />
<div class="row">
    @foreach (var item in Model)
    {
        <div class="col-md-4 col-sm-6 mb-4">
            <div class="card">
                <div class="card-img-container">
                    <img src="@item.ImageUrl" alt="@item.Name">
                </div>
                <div class="card-header">
                    <h5 class="card-title">@item.Name</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">@item.Description</p>
                    <p class="card-text"><b>Game Company: </b>@item.GameCompany.Name</p>
                    <p class="card-text"><b>Type: </b>@item.GameType.Name</p>
                    <p class="card-text"><b>Price: </b>@item.Price</p>
                    <div class="rating">
                        <p class="card-text">
                            <b>Rate: </b>
                            @for (int i = 1; i <= 5; i++)
                            {
                                <div class="rating-star @((item.Rate >= i) ? "selected" : "empty-star")"></div>
                            }
                    </div>
                </div>
                <div class="card-footer btn-container">

                    @if (User.Identity.IsAuthenticated && User.IsInRole("admin"))
                    {
                        <a asp-action="Delete" asp-controller="Game" asp-route-id="@item.Id" class="btn btn-outline-danger">
                            <i class="fa-solid fa-trash"></i> Delete
                        </a>
                    }
                    @if (item.Quantity == 0)
                    {
                        <span class="btn btn-danger disabled">Sold Out</span>
                    }
                    else
                    {
                        <a class="btn btn-success text-white" asp-controller="Order" asp-action="AddItemToShoppingCart" asp-route-id="@item.Id">
                            <i class="bi bi-cart-plus"></i> Add to Cart (Price @item.Price.ToString("c"))
                        </a>
                    }
                    @if (User.Identity.IsAuthenticated && User.IsInRole("admin"))
                    {
                        <a asp-action="Update" asp-controller="Game" asp-route-id="@item.Id" class="btn btn-outline-primary">
                            <i class="fa-solid fa-pen-to-square"></i> Edit
                        </a>
                    }
                </div>
            </div>
        </div>

    }
</div>
 @if (User.Identity.IsAuthenticated && User.IsInRole("admin"))
{
    <div style="position:fixed; right:25px;bottom:25px" class="text-white">
        <a asp-controller="Game" asp-action="Create" class="btn btn-success"> <i class="fa-solid fa-plus"></i> Add New </a>
    </div>

}
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const ratingContainers = document.querySelectorAll('.rating');

        ratingContainers.forEach(ratingContainer => {
            const ratingStars = ratingContainer.querySelectorAll('.rating-star');
            const ratingInput = ratingContainer.querySelector('.rating-input');
            const currentRating = parseFloat(ratingInput.value);

            ratingStars.forEach(star => {
                star.addEventListener('click', () => {
                    const value = parseFloat(star.getAttribute('data-value'));
                    updateRating(ratingContainer, value);
                    ratingInput.value = value; // Update the rating input value
                });
            });

            updateRating(ratingContainer, currentRating);
        });
    });

    function updateRating(ratingContainer, value) {
        const ratingStars = ratingContainer.querySelectorAll('.rating-star');

        ratingStars.forEach(star => {
            const starValue = parseFloat(star.getAttribute('data-value'));
            star.classList.toggle('empty-star', starValue > value);
            star.classList.remove('selected'); // Remove the 'selected' class from all stars
        });

        const selectedStars = ratingContainer.querySelectorAll('.rating-star.selected');
        selectedStars.forEach(star => {
            star.classList.remove('empty-star');
            star.classList.add('selected');
        });
    }
</script>